/*
Copyright Ishtiaq Islam.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ishtiaqhimel/crd/pkg/apis/crd.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SakiibBhaiLister helps list SakiibBhais.
// All objects returned here must be treated as read-only.
type SakiibBhaiLister interface {
	// List lists all SakiibBhais in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SakiibBhai, err error)
	// SakiibBhais returns an object that can list and get SakiibBhais.
	SakiibBhais(namespace string) SakiibBhaiNamespaceLister
	SakiibBhaiListerExpansion
}

// sakiibBhaiLister implements the SakiibBhaiLister interface.
type sakiibBhaiLister struct {
	indexer cache.Indexer
}

// NewSakiibBhaiLister returns a new SakiibBhaiLister.
func NewSakiibBhaiLister(indexer cache.Indexer) SakiibBhaiLister {
	return &sakiibBhaiLister{indexer: indexer}
}

// List lists all SakiibBhais in the indexer.
func (s *sakiibBhaiLister) List(selector labels.Selector) (ret []*v1.SakiibBhai, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SakiibBhai))
	})
	return ret, err
}

// SakiibBhais returns an object that can list and get SakiibBhais.
func (s *sakiibBhaiLister) SakiibBhais(namespace string) SakiibBhaiNamespaceLister {
	return sakiibBhaiNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SakiibBhaiNamespaceLister helps list and get SakiibBhais.
// All objects returned here must be treated as read-only.
type SakiibBhaiNamespaceLister interface {
	// List lists all SakiibBhais in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SakiibBhai, err error)
	// Get retrieves the SakiibBhai from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SakiibBhai, error)
	SakiibBhaiNamespaceListerExpansion
}

// sakiibBhaiNamespaceLister implements the SakiibBhaiNamespaceLister
// interface.
type sakiibBhaiNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SakiibBhais in the indexer for a given namespace.
func (s sakiibBhaiNamespaceLister) List(selector labels.Selector) (ret []*v1.SakiibBhai, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SakiibBhai))
	})
	return ret, err
}

// Get retrieves the SakiibBhai from the indexer for a given namespace and name.
func (s sakiibBhaiNamespaceLister) Get(name string) (*v1.SakiibBhai, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sakiibbhai"), name)
	}
	return obj.(*v1.SakiibBhai), nil
}
